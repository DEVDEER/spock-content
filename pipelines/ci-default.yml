pool:
  vmImage: 'ubuntu-latest'

trigger: none

variables:
  - name: DotnetBuildProject
    value: 'src/**/*.csproj'
  - name: DotnetTestProject
    value: 'tests/**/*Test*.csproj'
  - name: InfrastructureFolder
    value: 'infrastructure'
  - name: YarnBuildFolder
    value: 'src/Ui/Ui.Web/ClientApp'
  - name: BuildConfiguration
    value: 'Release'

steps:
  - pwsh: |
      $found = (Get-ChildItem -Recurse -Filter *Test*.csproj | measure).Count -gt 0 ? 1 : 0
      Write-Host "##vso[task.setvariable variable=doTests;]$found"
      Write-Host "Variable 'doTests' was set to: $found"
    displayName: 'Check for test projects'
    workingDirectory: tests

  - task: CopyFiles@2
    displayName: Copy Infrastructure script components
    inputs:
      sourceFolder: $(InfrastructureFolder)
      contents: '*.*'
      targetFolder: $(Build.ArtifactStagingDirectory)/infrastructure

  - task: CopyFiles@2
    displayName: Copy AzureDevops script components
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/.azuredevops/scripts
      contents: '*.*'
      targetFolder: $(Build.ArtifactStagingDirectory)/pipeline-scripts

  - task: AzurePowerShell@5
    displayName: Build BICEP
    inputs:
      azureSubscription: 'Azure'
      scriptType: filePath
      scriptPath: $(InfrastructureFolder)/build.ps1
      azurePowerShellVersion: 'latestVersion'
      FailOnStandardError: false
      pwsh: true

  - task: NodeTool@0
    displayName: Install node
    inputs:
      versionSpec: '14.x'

  - script: yarn install && yarn build
    workingDirectory: $(YarnBuildFolder)
    displayName: Build UI Web

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(YarnBuildFolder)
      archiveType: 'zip'
      includeRootFolder: false
      replaceExistingArchive: true
      archiveFile: '$(Build.ArtifactStagingDirectory)/Ui.Web.zip'

  - task: UseDotNet@2
    displayName: Use Dotnet
    inputs:
      useGlobalJson: true

  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: restore
      projects: '$(DotnetBuildProject)'

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      projects: '$(DotnetBuildProject)'
      arguments: '--no-restore --configuration $(BuildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: Test
    condition: eq(variables['doTests'], '1')
    inputs:
      command: test
      projects: $(ProjectsToTest)
      arguments: '--no-restore --no-build --configuration $(BuildConfiguration)'

  - script: 'dotnet tool install --global dotnet-reportgenerator-globaltool'
    condition: eq(variables['doTests'], '1')
    displayName: 'Install ReportGenerator tool'

  - script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'
    condition: eq(variables['doTests'], '1')
    displayName: 'Create test reports'

  - task: PublishCodeCoverageResults@1
    condition: eq(variables['doTests'], '1')
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'

  - task: DotNetCoreCLI@2
    displayName: Publish
    inputs:
      command: publish
      publishWebProjects: True
      arguments: '--no-restore --no-build --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      zipAfterPublish: True

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    condition: succeededOrFailed()
